{"name":"Teste","tagline":"","body":"# Listas Ligadas\r\n\r\n### int length (LInt)\r\n```\r\nint length (LInt z){\r\n\tLInt aux = z;\r\n\tint count = 0;\r\n\tif (z==NULL)\r\n\t\treturn 0;\r\n\twhile (aux->prox!= NULL){\r\n\t\tcount++;\r\n\t\taux = aux->prox;\r\n\t}\r\n\tcount ++;\r\n\treturn count;\r\n}\r\n```\r\n\r\n### void freeL (LInt)\r\n```\r\nvoid freeL (LInt z){\r\n\tif (z==NULL)\r\n\t\treturn;\r\n\tLInt aux = z;\r\n\twhile (z!=NULL){\r\n\t\tz=z->prox;\r\n\t\tfree(aux);\r\n\t\taux = z;\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### void imprime (LInt)\r\n```\r\nvoid imprime (LInt z){\r\n\tif (z==NULL)\r\n\t\treturn;\r\n\twhile (z!=NULL){\r\n\t\tprintf(\"%d\\n\", z->valor);\r\n\t\tz=z->prox;\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### LInt reverse (LInt)\r\n```\r\nLInt reverse (LInt z){\r\n\tif (z==NULL || z->prox==NULL)\r\n\t\treturn z;\r\n\tLInt top = z;\r\n\twhile (z->prox!=NULL){\r\n\t\tz=z->prox;\r\n\t}\r\n\tLInt bottom = z;\r\n\tLInt low = bottom;\r\n\tz=top;\r\n\twhile (low!=top){\r\n\t\twhile (z->prox!=low){\r\n\t\tz=z->prox;\r\n\t}\r\n\tlow->prox = z;\r\n\tlow=low->prox;\r\n\tz=top;\r\n\t}\r\n\ttop->prox = NULL;\r\n\r\n\treturn bottom;\r\n}\r\n```\r\n\r\n### void insert (LInt *, int)\r\n```\r\nvoid insert (LInt *z, int x){\r\n\tLInt newBox = newLInt(x,NULL);\r\n\tLInt zz = *z;\r\n\tif (zz == NULL){\r\n\t\tzz = newBox;\r\n\t\t*z = zz;\r\n\t\treturn;\r\n\t}\r\n\telse if (zz->valor > x){\r\n\t\tnewBox->prox = zz;\r\n\t\tzz = newBox;\r\n\t\t*z = zz;\r\n\t\treturn;\r\n\t}\r\n\twhile (zz->prox!=NULL && (zz->prox->valor)<x){\r\n\t\tzz= zz->prox;\r\n\t}\r\n\tnewBox->prox = zz->prox;\r\n\tzz-> prox = newBox;\r\n}\r\n```\r\n\r\n### int remove (LInt *, int)\r\n```\r\nint removez (LInt *z, int x){\r\n\tLInt zz = *z;\r\n\tLInt aux = zz;\r\n\tLInt ante = zz;\r\n\tif (zz==NULL || zz->valor > x)\r\n\t\treturn 1;\r\n\r\n\telse if (zz->valor == x){\r\n\t\tzz = zz->prox;\r\n\t\tfree(aux);\r\n\t\t*z = zz;\r\n\t\treturn 0;\r\n\t}\r\n\tzz= zz->prox;\r\n\twhile (zz && zz->valor < x){\r\n\t\tzz= zz->prox;\r\n\t\tante = ante->prox;\r\n\t}\r\n\tif (zz!=NULL && zz->valor == x){\r\n\t\tif (zz->prox != NULL){\r\n\t\t\tante->prox = zz->prox;\r\n\t\t\tfree(zz);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tfree(zz);\r\n\t\t\tante->prox = NULL;\r\n\t\t\treturn 0;\r\n\t}\r\n\t}\r\n\treturn 1;\r\n}\r\n```\r\n\r\n### LInt merge (LInt, LInt)\r\n```\r\nLInt merge(LInt a, LInt b){\r\n\tif (a==NULL)\r\n\t\treturn b;\r\n\tif (b==NULL)\r\n\t\treturn a;\r\n\tLInt head;\r\n\tif (a->valor < b->valor){\r\n\t\thead = a;\r\n\t\ta = a->prox;\r\n\t}\r\n\telse{\r\n\t\thead = b;\r\n\t\tb = b->prox;\r\n\t}\r\n\tLInt fixed_head = head;\r\n\twhile (a!=NULL && b!=NULL){\r\n\t\tif (a->valor < b->valor){\r\n\t\t\thead->prox = a;\r\n\t\t\thead = head->prox;\r\n\t\t\ta = a->prox;\r\n\t\t}\r\n\t\telse if (a->valor > b->valor){\r\n\t\t\thead->prox = b;\r\n\t\t\thead = head->prox;\r\n\t\t\tb = b->prox;\r\n\t\t}\r\n\t}\r\n\tif (a == NULL)\r\n\t\thead->prox = b;\r\n\telse if (b==NULL)\r\n\t\thead->prox = a;\r\n\treturn fixed_head;\r\n}\r\n```\r\n\r\n### void split (LInt l, int, LInt *, LInt *)\r\n```\r\nvoid split (LInt l, int x, LInt *mx, LInt *Mx){\r\n\tif (!l)\r\n\t        return;\r\n\tLInt Small = newLInt(666,NULL);\r\n\tLInt Big = newLInt(666,NULL);\r\n\tLInt smalltail = Small;\r\n\tLInt bigtail = Big;\r\n\twhile (l){\r\n\t\tif (l->valor <= x){\r\n\t\t\tsmalltail->prox = l;\r\n\t\t\tsmalltail = smalltail->prox;\r\n\t\t}\r\n\t\telse if (l->valor > x){\r\n\t\t\tbigtail->prox = l;\r\n\t\t\tbigtail = bigtail->prox;\r\n\t\t}\r\n\t\tl = l->prox;\r\n\t}\r\n\tsmalltail->prox = NULL;\r\n\tbigtail->prox = NULL;\r\n\t*mx = Small->prox;\r\n\t*Mx = Big->prox;\r\n\r\n}\r\n```\r\n\r\n### int remove (LInt *, int)\r\n```\r\nint remove10 (LInt *l, int x){\r\n\tLInt ll = *l;\r\n\tif (ll==NULL)\r\n\t\treturn 0;\r\n\tint count = 0;\r\n\r\n\tLInt ante = newLInt(666,ll);\r\n\tLInt head = ante;\r\n\tLInt aux;\r\n\twhile (ll){\r\n\t\twhile (ll && ll->valor == x){\r\n\t\t\taux = ll;\r\n\t\t\tll = ll->prox;\r\n\t\t\tfree(aux);\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tante->prox = ll;\r\n\t\tante = ante->prox;\r\n\t\tll = ll->prox;\r\n\t}\r\n\tante->prox = NULL;\r\n\t*l = head->prox;\r\n\tfree(head);\r\n\r\n\treturn count;\r\n}\r\n```\r\n\r\n### int removeDups (LInt *)\r\n```\r\nint removeDups (LInt *l){\r\n\tLInt ll = *l;\r\n\tint count = 0;\r\n\tif (ll==NULL)\r\n\t\treturn 0;\r\n\r\n\tLInt aux = newLInt(ll->valor, NULL);\r\n\tLInt head_of_aux = aux;\r\n\tLInt ante = ll;\r\n\tll = ll->prox;\r\n\r\n\twhile (ll){\r\n\t\twhile(aux){\r\n\t\t\tif (ll->valor == aux->valor){\r\n\t\t\t\taux = head_of_aux;\r\n\t\t\t\tcount ++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\taux = aux->prox;\r\n\t\t}\r\n\r\n\t\tif (aux==NULL){\r\n\t\t\taux = newLInt(ll->valor,head_of_aux);\r\n\t\t\thead_of_aux = aux;\r\n\t\t\tante = ll;\r\n\t\t\tll = ll->prox;\r\n\t\t}\r\n\t\telse{\r\n\t\taux = head_of_aux;\r\n\t\tante->prox = ll->prox;\r\n\t\tfree(ll);\r\n\t\tll = ante->prox;\r\n\t\t}\r\n\t}\r\n\treturn count;\r\n}\r\n```\r\n\r\n### int removeMaior (LInt *)\r\n```\r\nint removeMaior (LInt *l){\r\n\tLInt ll = *l;\r\n\tLInt aux = ll;\r\n\tint biggest = ll->valor;\r\n\tLInt ante = ll;\r\n\tll = ll->prox;\r\n\twhile (ll){\r\n\t\tif (ll->valor > biggest){\r\n\t\t\tbiggest = ll->valor;\r\n\t\t}\r\n\t\tll = ll->prox;\r\n\t}\r\n\r\n\tll = aux ->prox;\r\n\twhile (ll){\r\n\t\tif (ll->valor == biggest){\r\n\t\t\tante->prox = ll->prox;\r\n\t\t\tfree (ll);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tante = ll;\r\n\t\t\tll = ll->prox;\r\n\t\t}\r\n\t}\r\n\r\n\t*l = aux;\r\n\treturn biggest;\r\n}\r\n```\r\n\r\n### void init (LInt *)\r\n```\r\nvoid init (LInt *l){\r\n\tLInt ll = *l;\r\n\tLInt ante = ll;\r\n\tLInt head = ll;\r\n\tll = ll->prox;\r\n\twhile (ll->prox){\r\n\t\tante = ll;\r\n\t\tll = ll->prox;\r\n\t}\r\n\r\n\tante->prox = NULL;\r\n\tfree(ll);\r\n\t*l = head;\r\n}\r\n```\r\n\r\n### void snoc (LInt *, int)\r\n```\r\nvoid snoc (LInt *l, int x){\r\n\tLInt ll = *l;\r\n\tLInt head = ll;\r\n\twhile (ll->prox){\r\n\t\tll = ll->prox;\r\n\t}\r\n\tll->prox = newLInt(x,NULL);\r\n}\r\n```\r\n\r\n### void concat\r\n```\r\nvoid concat (LInt *a, LInt b){\r\n\tLInt aa = *a;\r\n\tLInt head = aa;\r\n\twhile (aa->prox){\r\n\t\taa = aa->prox;\r\n\t}\r\n\taa->prox = b;\r\n\t*a = head;\r\n}\r\n```\r\n\r\nLInt cloneR (LInt a){\r\n\r\n\tLInt last;\r\n\tLInt HEAD = a;\r\n\tif (a == NULL)\r\n\t\treturn NULL;\r\n\r\n\twhile (a->prox){\r\n\t\ta = a->prox;\r\n\t}\r\n\r\n\tlast = a;\r\n\ta = HEAD;\r\n\tLInt result = newLInt(last->valor, NULL);\r\n\tLInt head_of_res = result;\t\r\n\twhile (1){\r\n\t\twhile (a->prox != last){\r\n\t\t\ta = a->prox;\r\n\t\t}\r\n\t\tlast = a;\r\n\t\ta = HEAD;\r\n\t\tresult->prox = newLInt(last->valor, NULL);\r\n\t\tresult = result->prox;\r\n\t\tif (a == last)\r\n\t\t\tbreak;\r\n\t}\r\n\treturn head_of_res;\r\n}\r\n\r\n### int maximo (LInt)\r\n```\r\nint maximo (LInt l){\r\n\tint max = l->valor;\r\n\tl = l->prox;\r\n\twhile (l){\r\n\t\tif (l->valor > max)\r\n\t\t\tmax = l->valor;\r\n\t\tl = l->prox;\r\n\t}\r\n\treturn max;\r\n}\r\n```\r\n\r\n### int take (int, LInt *)\r\n```\r\nint take (int n, LInt *l){\r\n\tint size = 1;\r\n\tLInt ante;\r\n\tLInt ll = *l;\r\n\tLInt end;\r\n\twhile (ll && size < n){\r\n\t\tll = ll->prox;\r\n\t\tsize ++;\r\n\t}\r\n\r\n\tif (ll==NULL){\r\n\t\tsize--;\r\n\t\treturn size;\r\n\t\t}\r\n\r\n\tend = ll;\r\n\tll = ll->prox;\r\n\tend->prox=NULL;\r\n\tif (ll==NULL)\r\n\t\treturn size;\r\n\r\n\tante = ll;\r\n\tll =ll->prox;\r\n\tif (ll == NULL){\r\n\t\tfree(ante);\r\n\t\treturn size;\r\n\t}\r\n\twhile (ll->prox) {\r\n\t\tfree(ante);\r\n\t\tante = ll;\r\n\t\tll = ll->prox;\r\n\t}\r\n\t//free(ante);\r\n\treturn size;\r\n}\r\n```\r\n\r\n### int drop (int, LInt *)\r\n```\r\nint drop (int n, LInt *l){\r\n\tLInt ll = *l;\r\n\tint count = 0;\r\n\tif (ll == NULL || n == 0)\r\n\t\treturn count;\r\n\r\n\tcount++;\r\n\tLInt ante = ll;\r\n\tll=ll->prox;\r\n\twhile (count!=n && ll){\r\n\t\tfree (ante);\r\n\t\tante = ll;\r\n\t\tll = ll->prox;\r\n\t\tcount++;\r\n\t}\r\n\t*l =ll;\r\n\treturn count;\r\n}\r\n```\r\n\r\n### LInt Nforward\r\n```\r\nLInt Nforward(LInt l, int N){\r\n\twhile (N){\r\n\t\tl=l->prox;\r\n\t\tN--;\r\n\t}\r\n\treturn l;\r\n}\r\n```\r\n\r\n### int dumpL (LInt, int v[], int)\r\n```\r\nint dumpL (LInt l, int v[], int N){\r\n\tint count = 0;\r\n\twhile(count!=N){\r\n\t\tv[count] = l->valor;\r\n\t\tl= l->prox;\r\n\t\tcount ++;\r\n\t}\r\n\r\n\treturn count;\r\n}\r\n```\r\n\r\n### LInt somas (Lint)\r\n```\r\nLInt somas (LInt l){\r\n\tif (l==NULL)\r\n\t\treturn NULL;\r\n\r\n\tint somatorio = 0;\r\n\tLInt HEAD=l;\r\n\twhile (l){\r\n\t\tsomatorio+=l->valor;\r\n\t\tl->valor = somatorio;\r\n\t\tl=l->prox;\r\n\t}\r\n\treturn HEAD;\r\n}\r\n```\r\n\r\n### void remreps (LInt)\r\n```\r\nvoid remreps (LInt l){\r\n\tif (l==NULL || l->prox==NULL)\r\n\t\treturn;\r\n\tLInt head = l;\r\n\tint chosen = head->valor;\r\n\tl = l->prox;\r\n\tLInt ante = l;\r\n\tl=l->prox;\r\n\twhile (l){\r\n\t\tif (l->valor == chosen && l->prox){\r\n\t\t\tante->prox = l->prox;\r\n\t\t\tfree(l);\r\n\t\t\tl=ante->prox;\r\n\t\t}\r\n\t\telse if (l->valor == chosen && l->prox==NULL){\r\n\t\t\tante->prox = NULL;\r\n\t\t\tfree (l);\r\n\t\t}\r\n\t\tante = ante->prox;\r\n\t\tl=l->prox;\r\n\t\thead = head->prox;\r\n\t\tchosen = head->valor;\r\n\t}\r\n}\r\n```\r\n\r\n### LInt fromArray (int v[], int)\r\n```\r\nLInt fromArray (int v[], int N){\r\n\tif (N==0)\r\n\t\treturn NULL;\r\n\r\n\tint i;\r\n\tLInt result = newLInt(v[0],NULL);\r\n\tLInt head_of_res = result;\r\n\r\n\tfor (i=1; i<N; i++){\r\n\t\tresult->prox = newLInt(v[i],NULL);\r\n\t\tresult = result->prox;\r\n\t}\r\n\treturn head_of_res;\r\n}\r\n```\r\n\r\n### LInt rotateL (LInt)\r\n```\r\nLInt rotateL (LInt l){\r\n\tif (l==NULL || l->prox == NULL)\r\n\t\treturn l;\r\n\tLInt head = l;\r\n\tLInt aux = l->prox;\r\n\r\n\twhile (l->prox){\r\n\t\tl=l->prox;\r\n\t}\r\n\tl->prox = head;\r\n\thead->prox = NULL;\r\n\treturn aux;\r\n}\r\n```\r\n\r\n### LInt parte (LInt)\r\n```\r\nLInt parte (LInt l){\r\n\tif (l == NULL || l->prox == NULL)\r\n\t\treturn NULL;\r\n\r\n\tint count = 1;\r\n\tLInt head = l;\r\n\tLInt pares = l->prox;\r\n\tLInt head_of_pares = pares;\t\r\n\twhile (pares->prox){\r\n\t\tl->prox = pares->prox;\r\n\t\tl = l->prox;\r\n\t\tif (l->prox){\r\n\t\t\tpares->prox = l->prox;\r\n\t\t\tpares = pares->prox;\r\n\t\t}\r\n\t\telse if (l->prox ==NULL)\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tpares->prox = NULL;\r\n\tl->prox = NULL;\r\n\r\n\treturn head_of_pares;\r\n}\r\n```\r\n### int height (ABin)\r\n```\r\nint max (int a, int b){\r\n\tif (a>b)\r\n\t\treturn a;\t\r\n\treturn b;\r\n}\r\n\r\n\r\nint height (ABin a){\r\n\tint count = 0;\r\n\tif (a)\r\n\t\tcount = (1+max(height(a->esq),height(a->dir)));\r\n\treturn count;\r\n}\r\n```\r\n\r\n# Árvores Binárias\r\n\r\n### ABin cloneAB (ABin)\r\n```\r\nABin cloneAB (ABin a){\r\n\tif (a==NULL)\r\n\t\treturn NULL;\r\n\treturn newABin(a->valor,cloneAB(a->esq),cloneAB(a->dir));\r\n\t\r\n}\r\n```\r\n\r\n### void mirror (ABin *)\r\n```\r\nvoid mirror (ABin *a){\r\n\tABin aa = *a;\r\n\tif (aa==NULL)\r\n\t\treturn;\r\n\tmirror(&(aa->esq));\r\n\tmirror(&(aa->dir));\r\n\tABin temp = aa->esq;\r\n\taa->esq = aa->dir;\r\n\taa->dir = temp;\r\n}\r\n```\r\n\r\n### void inorder (ABin, LInt *)\r\n```\r\nvoid inorder (ABin a, LInt *l){\r\n\tif (a==NULL)\r\n\t\treturn;\r\n\tinorder(a->dir,l);\r\n\t*l= newLInt(a->valor,*l);\r\n\tinorder(a->esq,l);\r\n}\r\n```\r\n\r\n### void preorder (ABin, LInt *)\r\n```\r\nvoid preorder (ABin a, LInt *l){\r\n\tif (a==NULL)\r\n\t\treturn;\r\n\t*l = newLInt(a->valor,*l);\r\n\tpreorder(a->dir, l);\r\n\tpreorder(a->esq, l);\r\n}\r\n```\r\n\r\n### void posorder (ABin, LInt *)\r\n```\r\nvoid posorder (ABin a, LInt *l){\r\n\tif (a==NULL)\r\n\t\treturn;\r\n\tposorder(a->esq,l);\r\n\t*l = newLInt(a->valor, *l);\r\n\tposorder(a->dir,l); \r\n}\r\n```\r\n\r\n### int depth (ABin, int)\r\n```\r\nint depth (ABin a, int x){\r\n\tint level = 1;\r\n\tint tester = 0;\r\n\tif (a==NULL)\r\n\t\treturn -1;\r\n\tif (x > a->valor){\r\n\t\ttester = depth(a->dir,x);\r\n\t\tif (tester > -1)\r\n\t\t\tlevel = 1 + depth(a->dir, x);\r\n\t\telse\r\n\t\t\tlevel =-1;\r\n\t}\r\n\telse if (x < a->valor){\r\n\t\ttester = depth(a->esq,x);\r\n\t\tif (tester > -1)\r\n\t\t\tlevel = 1 + depth(a->esq, x);\r\n\t\telse\r\n\t\t\tlevel =-1;\r\n\t}\r\n\treturn level;\r\n}\r\n```\r\n\r\n### int freeAB (ABin)\r\n```\r\nint freeAB (ABin a){\r\n\tint count = 0;\r\n\tif (a==NULL)\r\n\t\treturn count;\r\n\tcount = 1 + freeAB(a->esq) + freeAB(a->dir);\r\n\t//a->esq = a->dir = NULL;\r\n\tfree(a);\r\n\treturn count;\r\n}\r\n```\r\n\r\n### int pruneAB (ABin *, int)\r\n```\r\nint pruneAB (ABin *a, int l){\r\n\tint level = l;\r\n\tif (level==0){\r\n\t\treturn freeAB(*a);\r\n\t\t(*a)->esq = NULL;\r\n\t\t(*a)->dir = NULL;\r\n\t}\r\n\tlevel --;\r\n\r\n\tif ((*a)->esq && (*a)->dir)\r\n\t\treturn \t(pruneAB(&((*a)->esq), level ) + pruneAB(&((*a)->dir), level ));\r\n\telse if (!(*a)->esq && (*a)->dir)\r\n\t\treturn pruneAB(&((*a)->dir), level);\r\n\telse if ((*a)->esq && !(*a)->dir)\r\n\t\treturn pruneAB(&((*a)->esq), level);\r\n\t\r\n\t//if (!(*a)->esq && !(*a)->dir)\r\n\treturn 0;\r\n}\r\n```\r\n\r\n### int iguais (ABin, ABin)\r\n```\r\nint min(int a, int b){\r\n\tif (a<b)\r\n\t\treturn a;\r\n\treturn b;\r\n}\r\n\r\nint iguais (ABin a, ABin b){\r\n\tif ((!a && b) || (a && !b) )\r\n\t\treturn 0;\r\n\telse if (a && b && a->valor != b->valor)\r\n\t\treturn 0;\r\n\tint r = 1;\r\n\tif (a && b)\r\n\t\tr = min(iguais(a->esq,b->esq), iguais(a->dir,b->dir));\r\n\treturn r;\r\n}\r\n```\r\n\r\n\r\n### LInt nivel (ABin, int)\r\n```\r\nLInt nivel (ABin a, int n){\r\n\tLInt l;\r\n\tif (!a)\r\n\t\treturn NULL;\r\n\tif (n==1){\r\n\t\tl = newLInt(a->valor, NULL);\r\n\t\treturn l;\r\n\t}\r\n\tLInt head;\r\n\tl = nivel(a->esq, n-1);\r\n\tif (l){\r\n\t\thead = l;\r\n\t\twhile (l->prox)\r\n\t\t\tl = l->prox;\r\n\t\tl->prox = nivel(a->dir, n-1);\r\n\t}\r\n\telse {\r\n\t\tl = nivel(a->dir, n-1);\r\n\t\thead = l;\r\n\t}\r\n\treturn head;\r\n}\r\n```\r\n\r\n### nivelArray (ABin, int, int v[])\r\n```\r\nint nivelArray (ABin a, int n, int v[]){\r\n\tint* temp = v;\r\n\tif (a==NULL)\r\n\t\treturn 0;\r\n\tif (n==1){\r\n\t\tv[0] = a->valor;\r\n\t\treturn 1;\r\n\t}\r\n\telse{\r\n\t\tn--;\r\n\t\tv+=nivelArray(a->esq,n,v);\r\n\t\tv+=nivelArray(a->dir,n,v);\r\n\t}\r\n\treturn v - temp;\r\n}\r\n```\r\n\r\n### int dumpABin (ABin, int v[], int)\r\n```\r\nint dumpAbin (ABin a, int v[], int N){\r\n\tint temp1, temp2;\r\n\tif (a==NULL|| N<0)\r\n\t\treturn 0;\r\n\r\n\ttemp1=dumpAbin(a->esq, v, N);\r\n\tN-=temp1;\r\n\tv+=temp1;\r\n\t*v = (a->valor);\r\n\tN--;\r\n\ttemp2=dumpAbin(a->dir,v+1,N);\r\n\r\n\treturn temp2+temp1+1;\r\n}\r\n```\r\n\r\n### ABin somasAB (ABin)\r\n```\r\nABin somasAB (ABin a){\r\n\tif (a==NULL)\r\n\t\treturn NULL;\r\n\tABin r = newABin(a->valor,NULL,NULL);\r\n\r\n\tint z = a->valor;\r\n\r\n\tif (a->esq && a->dir)\r\n\t\tz= somasAB(a->esq)->valor + somasAB(a->dir)->valor;\r\n\telse if (a->esq == NULL && a->dir)\r\n\t\tz = somasAB(a->dir)->valor;\r\n\telse if (a->esq && a->dir == NULL)\r\n\t\tz = somasAB(a->esq)->valor;\r\n\telse if (a->esq == NULL && a->dir==NULL)\r\n\t\tz = a->valor;\r\n\r\n\tr = newABin(z,somasAB(a->esq),somasAB(a->dir));\r\n\t\r\n\treturn r;\r\n}\r\n```\r\n\r\n### int contaFolhas (ABin)\r\n```\r\nint contaFolhas (ABin a){\r\n\tif (!a)\r\n\t\treturn 0;\r\n\tif (a->esq == NULL && a->dir == NULL)\r\n\t\treturn 1;\r\n\tint r = 0;\r\n\tr += contaFolhas(a->esq)+contaFolhas(a->dir);\r\n\treturn r;\r\n}\r\n```\r\n\r\n\r\n### ABin mirror2(ABin)\r\n```\r\nABin mirror2 (ABin a){\r\n\tif (!a)\r\n\t\treturn NULL;\r\n\tABin r = newABin(a->valor,mirror2(a->dir),mirror2(a->esq));\r\n\t\r\n\treturn r;\r\n}\r\n```\r\n\r\n### int add (ABin *, int)\r\n```\r\nint add (ABin *a, int x){\r\n\tif (!*a){\r\n\t\t*a = newABin (x,NULL,NULL);\r\n\t\treturn 0;\r\n\t}\r\n\telse if ((*a)->valor == x){\r\n\t\treturn 1;\r\n\t}\r\n\telse if ((*a)->valor < x){\r\n\t\tadd (&((*a)->dir),x);\r\n\t}\r\n\telse if ((*a)->valor > x){\r\n\t\tadd (&((*a)->esq),x);\r\n\t}\r\n\treturn 1;\r\n}\r\n```\r\n\r\n### int lookup (ABin, int)\r\n```\r\nint lookup (ABin a, int x){\r\n\tif (!a)\r\n\t\treturn 0;\r\n\telse if (a->valor == x)\r\n\t\treturn 1;\r\n\tint z = 0;\r\n\tz+=lookup(a->esq,x);\r\n\tz+=lookup(a->dir,x);\r\n\treturn z;\r\n}\r\n```\r\n\r\n### int maior (ABin)\r\n```\r\nint maior (ABin a){\r\n\twhile (a->dir)\r\n\t\ta = a->dir;\r\n\treturn a->valor;\r\n}\r\n```\r\n\r\n### void removeMaiorAB (ABin *)\r\n```\r\nvoid removeMaiorAB (ABin *a){\r\n\tABin iter = *a;\r\n\tif (!iter)\r\n\t\treturn;\r\n\tABin ante = iter;\r\n\titer = iter->dir;\r\n\twhile (iter->dir){\r\n\t\tante = iter;\r\n\t\titer = iter->dir;\r\n\t}\r\n\tfree(iter);\r\n\tante->dir = NULL;\r\n}\r\n```\r\n\r\n### int maiores (ABin, int)\r\n```\r\nint maiores (ABin a, int x){\r\n\tif (!a)\r\n\t\treturn 0;\r\n\tif (a->valor > x)\r\n\t\treturn 1 + maiores(a->esq, x) + maiores(a->dir, x);\r\n\telse\r\n\t\treturn maiores(a->esq, x) + maiores (a->dir, x);\r\n}\r\n```\r\n\r\n### void fromList (LInt, ABin *)\r\n```\r\nvoid fromList (LInt l, ABin *a){\r\n\tif (!l)\r\n\t\treturn ;\r\n\t*a = newABin(l->valor,NULL,NULL);\r\n\tl=l->prox;\r\n\tint x;\r\n\twhile(l){\r\n\t\tadd(a,l->valor);\r\n\t\tl=l->prox;\r\n\t}\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}